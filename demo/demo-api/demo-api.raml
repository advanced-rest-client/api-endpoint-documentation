#%RAML 1.0
title: API body demo
version: v1
baseUri: http://{instance}.domain.com/

baseUriParameters:
  instance:
    description: |
      The execution environments. Can be one of:
      - development
      - staging
      - qa
      - production
    type: string
    enum: [development, staging, qa, production]
    pattern: (development|staging|qa|production)
    default: production
annotationTypes:
  deprecated: string
  annotationTest: nil
  clearanceLevel:
    properties:
      level:
        enum: [ low, medium, high ]
        required: true
      signature:
        required: true

types:
  Image: !include resourceTypes/image.raml
  Resource: !include resourceTypes/resource.raml
  AppPerson: !include resourceTypes/app-person.raml
  Product: !include resourceTypes/product.raml
  ErrorResource:
    description: A response that is errored
    type: object
    properties:
      error:
        type: boolean
        required: true
        example: true
        default: true
        description: Indicate that the response is errored.
      message:
        type: string
        description: The error message associated with the error.
        required: true
  Feature:
    description: A feature to test enum values in the URI parameters.
    type: string
    enum:
      - A
      - B
      - C

resourceTypes:
  ResourceNotFound:
    get:
      responses:
        404:
          body:
            application/json:
              displayName: Not found response
              type: ErrorResource
            application/xml:
              displayName: Not found response
              type: !include schemas/error-response.xsd
              example: !include examples/e404.xml
  UnauthorizedResponse:
    get:
      responses:
        404:
          body:
            application/json:
              displayName: Unauthorized response
              type: ErrorResource
            application/xml:
              displayName: Unauthorized response
              type: !include schemas/error-response.xsd
              example: !include examples/e401.xml
  RequestErrorResponse:
    get:
      responses:
        400:
          description: The error response when one of the parameters is invalid and can't be parsed. Nothing can be done at the time except correcting the request to send valid data.
          body:
            application/json:
              displayName: Invalid request
              type: ErrorResource
            application/xml:
              displayName: Invalid request
              type: !include schemas/error-response.xsd
              example: !include examples/e400.xml
traits:
  Paginated: !include traits/pagination.raml
  Adminable: !include traits/adminable.raml
  Testable:
    securedBy: [x-custom]
securitySchemes:
  oauth_2_0: !include securitySchemes/oauth_2_0.raml
  x-custom: !include securitySchemes/x-custom.raml
  basic: !include securitySchemes/basic.raml

/people:
  (clearanceLevel):
    level: high
    signature: test
  displayName: People
  description: |
    An endpoint to operate on a person model.

    You can create, update, read or delete a person resource from the
    system.
  securedBy: oauth_2_0
  is: [Adminable, Testable]
  type: ResourceNotFound
  get:
    (deprecated): This method will be replace in next version of this API with search API.
    displayName: List people
    description: Use this method to list all people in the system.
    is: [Paginated: {resourceType: AppPerson}]

    headers:
      x-people-op-id:
        (annotationTest):
        type: string
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        description: People ops ID. It is UUID v4 string
        example: 9719fa6f-c666-48e0-a191-290890760b30
  /{personId}:
    securedBy: x-custom
    type: RequestErrorResponse
    displayName: A person
    description: The endpoint to access information about the person
    uriParameters:
      personId:
        type: integer
        required: true
        description: The ID of the person in the system. It is generated by the database numeric value for the person.
        example: 1234
    get:
      displayName: Get a person
      description: Returns a person
      headers:
        x-client-id:
          (deprecated): This will be replaced
          example: 123456-acme.client.com
          description: The application id used to make a request. It can be obtained in the developer console.
          type: string
          required: true
        x-people-op-id:
          (annotationTest):
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
          description: People ops ID. It is UUID v4 string
          example: 9719fa6f-c666-48e0-a191-290890760b30
      responses:
        200:
          body:
            application/json:
              type: AppPerson
            application/xml:
              type: !include schemas/person.xsd
              example: !include examples/person.xml
    delete:
      displayName: Remove a person
      description: Removes the person from the datastore. This method do not returns any data in 200 response.
      responses:
        204:
      headers:
        x-people-op-id:
          (annotationTest):
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
          description: People ops ID. It is UUID v4 string
          example: 9719fa6f-c666-48e0-a191-290890760b30
    put:
      displayName: Update a person
      description: Updates the person in the datastore.
      queryParameters:
        testPatam: string
      body:
        application/json:
          type: AppPerson
        application/xml:
          type: !include schemas/person.xsd
          example: !include examples/person.xml
      responses:
        200:
      headers:
        x-people-op-id:
          (annotationTest):
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
          description: People ops ID. It is UUID v4 string
          example: 9719fa6f-c666-48e0-a191-290890760b30
/products:
  displayName: Products
  description: The API is to be used to access data about the products.
  is: [Adminable]
  post:
    displayName: Create product
    description: |
      Creates a product in the store.
      While creating a product the `id` and `etag` properties will be ignored.

      The endpoint will reject the request if exactly the same product is already defined in the
      datastore (all properties of both objects equals). Newly created product is available
      for listing but **it won't be available for ordering API** until it's availability is not set.
    body:
      application/json:
        type: Product
      application/xml:
        type: !include schemas/product.xsd
        example: !include examples/product.xml
    responses:
      200:
        body:
          application/json:
            type: Product
            examples:
              Product:
                id: d697f5cea85011e680f576304dec7eb7
                name: Super product
                quantity: 125
                unit: ml
                upc: "123456789101"
                available: true
                etag: "W/\"686897696a7c876b7e\""
              OtherProduct:
                id: 123e4567e89b12d3a456426655440000
                name: Acme Product
                quantity: 1
                unit: kg
                upc: "223456789101"
                available: true
                etag: "W/\"123456789\""
          application/xml:
            type: !include schemas/product.xsd
            example: !include examples/product.xml
      400:
        description: The request has been rejected. Probably the product already exists in the datastore.
/notypes:
  post:
    displayName: A method
/traits-only:
  is: [Adminable]
  post:
    displayName: A method
